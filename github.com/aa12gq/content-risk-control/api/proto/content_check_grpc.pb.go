// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/proto/content_check.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ContentCheckService_CheckContent_FullMethodName            = "/content_check.ContentCheckService/CheckContent"
	ContentCheckService_BatchCheckContent_FullMethodName       = "/content_check.ContentCheckService/BatchCheckContent"
	ContentCheckService_CheckContentWithContext_FullMethodName = "/content_check.ContentCheckService/CheckContentWithContext"
	ContentCheckService_StreamCheckContent_FullMethodName      = "/content_check.ContentCheckService/StreamCheckContent"
)

// ContentCheckServiceClient is the client API for ContentCheckService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 内容审核服务
type ContentCheckServiceClient interface {
	// 单条内容审核
	CheckContent(ctx context.Context, in *CheckContentRequest, opts ...grpc.CallOption) (*CheckContentResponse, error)
	// 批量内容审核
	BatchCheckContent(ctx context.Context, in *BatchCheckContentRequest, opts ...grpc.CallOption) (*BatchCheckContentResponse, error)
	// 基于上下文的内容审核
	CheckContentWithContext(ctx context.Context, in *CheckContentWithContextRequest, opts ...grpc.CallOption) (*CheckContentResponse, error)
	// 实时内容审核（流式响应）
	StreamCheckContent(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[CheckContentRequest, CheckContentResponse], error)
}

type contentCheckServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContentCheckServiceClient(cc grpc.ClientConnInterface) ContentCheckServiceClient {
	return &contentCheckServiceClient{cc}
}

func (c *contentCheckServiceClient) CheckContent(ctx context.Context, in *CheckContentRequest, opts ...grpc.CallOption) (*CheckContentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckContentResponse)
	err := c.cc.Invoke(ctx, ContentCheckService_CheckContent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentCheckServiceClient) BatchCheckContent(ctx context.Context, in *BatchCheckContentRequest, opts ...grpc.CallOption) (*BatchCheckContentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchCheckContentResponse)
	err := c.cc.Invoke(ctx, ContentCheckService_BatchCheckContent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentCheckServiceClient) CheckContentWithContext(ctx context.Context, in *CheckContentWithContextRequest, opts ...grpc.CallOption) (*CheckContentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckContentResponse)
	err := c.cc.Invoke(ctx, ContentCheckService_CheckContentWithContext_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentCheckServiceClient) StreamCheckContent(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[CheckContentRequest, CheckContentResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ContentCheckService_ServiceDesc.Streams[0], ContentCheckService_StreamCheckContent_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CheckContentRequest, CheckContentResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ContentCheckService_StreamCheckContentClient = grpc.BidiStreamingClient[CheckContentRequest, CheckContentResponse]

// ContentCheckServiceServer is the server API for ContentCheckService service.
// All implementations must embed UnimplementedContentCheckServiceServer
// for forward compatibility.
//
// 内容审核服务
type ContentCheckServiceServer interface {
	// 单条内容审核
	CheckContent(context.Context, *CheckContentRequest) (*CheckContentResponse, error)
	// 批量内容审核
	BatchCheckContent(context.Context, *BatchCheckContentRequest) (*BatchCheckContentResponse, error)
	// 基于上下文的内容审核
	CheckContentWithContext(context.Context, *CheckContentWithContextRequest) (*CheckContentResponse, error)
	// 实时内容审核（流式响应）
	StreamCheckContent(grpc.BidiStreamingServer[CheckContentRequest, CheckContentResponse]) error
	mustEmbedUnimplementedContentCheckServiceServer()
}

// UnimplementedContentCheckServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedContentCheckServiceServer struct{}

func (UnimplementedContentCheckServiceServer) CheckContent(context.Context, *CheckContentRequest) (*CheckContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckContent not implemented")
}
func (UnimplementedContentCheckServiceServer) BatchCheckContent(context.Context, *BatchCheckContentRequest) (*BatchCheckContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCheckContent not implemented")
}
func (UnimplementedContentCheckServiceServer) CheckContentWithContext(context.Context, *CheckContentWithContextRequest) (*CheckContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckContentWithContext not implemented")
}
func (UnimplementedContentCheckServiceServer) StreamCheckContent(grpc.BidiStreamingServer[CheckContentRequest, CheckContentResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamCheckContent not implemented")
}
func (UnimplementedContentCheckServiceServer) mustEmbedUnimplementedContentCheckServiceServer() {}
func (UnimplementedContentCheckServiceServer) testEmbeddedByValue()                             {}

// UnsafeContentCheckServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContentCheckServiceServer will
// result in compilation errors.
type UnsafeContentCheckServiceServer interface {
	mustEmbedUnimplementedContentCheckServiceServer()
}

func RegisterContentCheckServiceServer(s grpc.ServiceRegistrar, srv ContentCheckServiceServer) {
	// If the following call pancis, it indicates UnimplementedContentCheckServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ContentCheckService_ServiceDesc, srv)
}

func _ContentCheckService_CheckContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentCheckServiceServer).CheckContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentCheckService_CheckContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentCheckServiceServer).CheckContent(ctx, req.(*CheckContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentCheckService_BatchCheckContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCheckContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentCheckServiceServer).BatchCheckContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentCheckService_BatchCheckContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentCheckServiceServer).BatchCheckContent(ctx, req.(*BatchCheckContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentCheckService_CheckContentWithContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckContentWithContextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentCheckServiceServer).CheckContentWithContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentCheckService_CheckContentWithContext_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentCheckServiceServer).CheckContentWithContext(ctx, req.(*CheckContentWithContextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentCheckService_StreamCheckContent_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ContentCheckServiceServer).StreamCheckContent(&grpc.GenericServerStream[CheckContentRequest, CheckContentResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ContentCheckService_StreamCheckContentServer = grpc.BidiStreamingServer[CheckContentRequest, CheckContentResponse]

// ContentCheckService_ServiceDesc is the grpc.ServiceDesc for ContentCheckService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContentCheckService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "content_check.ContentCheckService",
	HandlerType: (*ContentCheckServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckContent",
			Handler:    _ContentCheckService_CheckContent_Handler,
		},
		{
			MethodName: "BatchCheckContent",
			Handler:    _ContentCheckService_BatchCheckContent_Handler,
		},
		{
			MethodName: "CheckContentWithContext",
			Handler:    _ContentCheckService_CheckContentWithContext_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamCheckContent",
			Handler:       _ContentCheckService_StreamCheckContent_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/proto/content_check.proto",
}
